<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\RiserStackController
 */
class RiserStackControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('stacks.create'));

        $response->assertOk();
        $response->assertViewIs('stacks.create');
        $response->assertViewHas('voice_parts');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $riserStack = \App\Models\RiserStack::factory()->create();

        $response = $this->delete(route('stacks.destroy', ['stack' => $riserStack->stack]));

        $response->assertRedirect(route('stacks.index'));
        $this->assertDeleted($stacks);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $riserStack = \App\Models\RiserStack::factory()->create();

        $response = $this->get(route('stacks.edit', ['stack' => $riserStack->stack]));

        $response->assertOk();
        $response->assertViewIs('stacks.edit');
        $response->assertViewHas('stack');
        $response->assertViewHas('voice_parts');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('stacks.index'));

        $response->assertOk();
        $response->assertViewIs('stacks.index');
        $response->assertViewHas('stacks');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $riserStack = \App\Models\RiserStack::factory()->create();

        $response = $this->get(route('stacks.show', ['stack' => $riserStack->stack]));

        $response->assertOk();
        $response->assertViewIs('stacks.show');
        $response->assertViewHas('stack');
        $response->assertViewHas('voice_parts');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('stacks.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('stacks.show', [$stack]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $riserStack = \App\Models\RiserStack::factory()->create();

        $response = $this->put(route('stacks.update', ['stack' => $riserStack->stack]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('stacks.show', [$stack]));

        // TODO: perform additional assertions
    }

    // test cases...
}
