<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\SongController
 */
class SongControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('songs.create'));

        $response->assertOk();
        $response->assertViewIs('songs.create');
        $response->assertViewHas('categories');
        $response->assertViewHas('statuses');
        $response->assertViewHas('pitches');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $song = \App\Models\Song::factory()->create();

        $response = $this->delete(route('songs.destroy', [$song]));

        $response->assertRedirect(route('songs.index'));
        $this->assertDeleted($songs);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $song = \App\Models\Song::factory()->create();

        $response = $this->get(route('songs.edit', [$song]));

        $response->assertOk();
        $response->assertViewIs('songs.edit');
        $response->assertViewHas('song');
        $response->assertViewHas('categories');
        $response->assertViewHas('statuses');
        $response->assertViewHas('pitches');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('songs.index'));

        $response->assertOk();
        $response->assertViewIs('songs.index');
        $response->assertViewHas('all_songs');
        $response->assertViewHas('active_songs');
        $response->assertViewHas('learning_songs');
        $response->assertViewHas('pending_songs');
        $response->assertViewHas('archived_songs');
        $response->assertViewHas('filters');
        $response->assertViewHas('sorts');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $song = \App\Models\Song::factory()->create();

        $response = $this->get(route('songs.show', [$song]));

        $response->assertOk();
        $response->assertViewIs('songs.show');
        $response->assertViewHas('song');
        $response->assertViewHas('categories_keyed');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('songs.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('songs.show', [$song]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $song = \App\Models\Song::factory()->create();

        $response = $this->put(route('songs.update', [$song]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('songs.show', [$song]));

        // TODO: perform additional assertions
    }

    // test cases...
}
