<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\TaskNotificationTemplateController
 */
class TaskNotificationTemplateControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->get(route('tasks.notifications.create', [$task]));

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->delete(route('tasks.notifications.destroy', [$task, 'notification' => $notification]));

        $response->assertRedirect(route('tasks.show', $task));
        $this->assertDeleted($tasks);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->get(route('tasks.notifications.edit', [$task, 'notification' => $notification]));

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->get(route('tasks.notifications.show', [$task, 'notification' => $notification]));

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->post(route('tasks.notifications.store', [$task]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('tasks.notifications.show', [$task, $template]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $task = \App\Models\Task::factory()->create();

        $response = $this->put(route('tasks.notifications.update', [$task, 'notification' => $notification]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('tasks.notifications.show', [$task, $notification]));

        // TODO: perform additional assertions
    }

    // test cases...
}
