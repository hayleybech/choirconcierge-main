<?php

namespace Tests\Feature\Http\Controllers;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\UserController
 */
class UserControllerTest extends TestCase
{
	use RefreshDatabase;

	/**
	 * @test
	 */
	public function add_roles_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$user = User::factory()->create();

		$response = $this->post(route('users.addroles', [$user]), [
			// TODO: send request data
		]);

		$response->assertRedirect('/users');

		// TODO: perform additional assertions
	}

	/**
	 * @test
	 */
	public function detach_role_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$user = User::factory()->create();
		$role = \App\Models\Role::factory()->create();

		$response = $this->get(route('users.detachrole', [$user, $role]));

		$response->assertRedirect('/users');

		// TODO: perform additional assertions
	}

	/**
	 * @test
	 */
	public function find_roles_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$response = $this->get('users/roles/find');

		$response->assertOk();

		// TODO: perform additional assertions
	}

	/**
	 * @test
	 */
	public function find_singer_categories_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$response = $this->get('users/singer-categories/find');

		$response->assertOk();

		// TODO: perform additional assertions
	}

	/**
	 * @test
	 */
	public function find_users_returns_results()
	{
		$this->withoutExceptionHandling();

		$this->actingAs($this->createUserWithRole('Membership Team'));

		$user = $this->createUserWithRole('Music Team');
		$user->first_name = 'John';
		$user->last_name = 'Smith';
		$user->email = 'js@example.com';
		$user->save();

		$response = $this->get(the_tenant_route('findUsers', ['q' => 'john']));

		$response->assertOk();
		$response->assertJsonFragment([
			[
				'id' => $user->id,
				'text' => 'John Smith (js@example.com) [Music Team]',
			],
		]);
	}

	/**
	 * @test
	 */
	public function find_voice_parts_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$response = $this->get('users/voice-parts/find');

		$response->assertOk();

		// TODO: perform additional assertions
	}

	/**
	 * @test
	 */
	public function index_returns_an_ok_response()
	{
		$this->markTestIncomplete(
			'This test case was generated by Shift. When you are ready, remove this line and complete this test case.',
		);

		$response = $this->get(route('users.index'));

		$response->assertOk();
		$response->assertViewIs('users.index');
		$response->assertViewHas('users');
		$response->assertViewHas('roles_all');

		// TODO: perform additional assertions
	}

	// test cases...
}
