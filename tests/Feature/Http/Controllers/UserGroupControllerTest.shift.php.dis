<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\UserGroupController
 */
class UserGroupControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('groups.create'));

        $response->assertOk();
        $response->assertViewIs('groups.create');
        $response->assertViewHas('voice_parts');
        $response->assertViewHas('singer_categories');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $userGroup = \App\Models\UserGroup::factory()->create();

        $response = $this->delete(route('groups.destroy', ['group' => $userGroup->group]));

        $response->assertRedirect(route('groups.index'));
        $this->assertDeleted($groups);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $userGroup = \App\Models\UserGroup::factory()->create();

        $response = $this->get(route('groups.edit', ['group' => $userGroup->group]));

        $response->assertOk();
        $response->assertViewIs('groups.edit');
        $response->assertViewHas('group');
        $response->assertViewHas('voice_parts');
        $response->assertViewHas('singer_categories');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('groups.index'));

        $response->assertOk();
        $response->assertViewIs('groups.index');
        $response->assertViewHas('groups');
        $response->assertViewHas('filters');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $userGroup = \App\Models\UserGroup::factory()->create();

        $response = $this->get(route('groups.show', ['group' => $userGroup->group]));

        $response->assertOk();
        $response->assertViewIs('groups.show');
        $response->assertViewHas('group');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('groups.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('groups.show', [$group]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $userGroup = \App\Models\UserGroup::factory()->create();

        $response = $this->put(route('groups.update', ['group' => $userGroup->group]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('groups.show', [$group]));

        // TODO: perform additional assertions
    }

    // test cases...
}
