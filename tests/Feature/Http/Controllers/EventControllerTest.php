<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventController
 */
class EventControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('events.create'));

        $response->assertOk();
        $response->assertViewIs('events.create');
        $response->assertViewHas('types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Models\Event::factory()->create();

        $response = $this->delete(route('events.destroy', [$event]));

        $response->assertRedirect(route('events.index'));
        $this->assertDeleted($events);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Models\Event::factory()->create();

        $response = $this->get(route('events.edit', [$event]));

        $response->assertOk();
        $response->assertViewIs('events.edit');
        $response->assertViewHas('event');
        $response->assertViewHas('types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('events.index'));

        $response->assertOk();
        $response->assertViewIs('events.index');
        $response->assertViewHas('all_events');
        $response->assertViewHas('upcoming_events');
        $response->assertViewHas('past_events');
        $response->assertViewHas('filters');
        $response->assertViewHas('sorts');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Models\Event::factory()->create();

        $response = $this->get(route('events.show', [$event]));

        $response->assertOk();
        $response->assertViewIs('events.show');
        $response->assertViewHas('event');
        $response->assertViewHas('my_attendance');
        $response->assertViewHas('singers_rsvp_yes_count');
        $response->assertViewHas('singers_rsvp_maybe_count');
        $response->assertViewHas('singers_rsvp_no_count');
        $response->assertViewHas('singers_rsvp_missing_count');
        $response->assertViewHas('voice_parts_rsvp_yes_count');
        $response->assertViewHas('singers_attendance_present');
        $response->assertViewHas('singers_attendance_absent');
        $response->assertViewHas('singers_attendance_absent_apology');
        $response->assertViewHas('singers_attendance_missing');
        $response->assertViewHas('voice_parts_attendance');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('events.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('events.show', [$event]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = \App\Models\Event::factory()->create();

        $response = $this->put(route('events.update', [$event]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('events.show', [$event]));

        // TODO: perform additional assertions
    }

    // test cases...
}
