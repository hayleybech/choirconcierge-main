<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\SingerController
 */
class SingerControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('singers.create'));

        $response->assertOk();
        $response->assertViewIs('singers.create');
        $response->assertViewHas('voice_parts');
        $response->assertViewHas('roles');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $singer = \App\Models\Singer::factory()->create();

        $response = $this->delete(route('singers.destroy', [$singer]));

        $response->assertRedirect(route('singers.index'));
        $this->assertDeleted($singers);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $singer = \App\Models\Singer::factory()->create();

        $response = $this->get(route('singers.edit', [$singer]));

        $response->assertOk();
        $response->assertViewIs('singers.edit');
        $response->assertViewHas('singer');
        $response->assertViewHas('voice_parts');
        $response->assertViewHas('roles');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('singers.index'));

        $response->assertOk();
        $response->assertViewIs('singers.index');
        $response->assertViewHas('all_singers');
        $response->assertViewHas('active_singers');
        $response->assertViewHas('member_singers');
        $response->assertViewHas('prospect_singers');
        $response->assertViewHas('archived_singers');
        $response->assertViewHas('filters');
        $response->assertViewHas('sorts');
        $response->assertViewHas('categories');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $singer = \App\Models\Singer::factory()->create();

        $response = $this->get(route('singers.show', [$singer]));

        $response->assertOk();
        $response->assertViewIs('singers.show');
        $response->assertViewHas('singer');
        $response->assertViewHas('categories');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('singers.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('singers.show', [$singer]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $singer = \App\Models\Singer::factory()->create();

        $response = $this->put(route('singers.update', [$singer]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('singers.show', [$singer]));

        // TODO: perform additional assertions
    }

    // test cases...
}
